name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, notification-service]
        # Add other services here as they are developed

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/services/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: backend/services/${{ matrix.service }}
        run: npm ci

      - name: Run linting
        working-directory: backend/services/${{ matrix.service }}
        run: npm run lint

      - name: Run tests
        working-directory: backend/services/${{ matrix.service }}
        run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [user-service, notification-service]
        # Add other services here as they are developed

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: backend/services/${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/eatr-${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/eatr-${{ matrix.service }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name eatr-cluster --region ${{ secrets.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          # Update image tags in deployment files
          for service in user-service notification-service; do
            sed -i "s|eatr/${service}:latest|${{ secrets.DOCKERHUB_USERNAME }}/eatr-${service}:${github.sha}|g" infra/kubernetes/deployments/${service}-deployment.yaml
            kubectl apply -f infra/kubernetes/deployments/${service}-deployment.yaml
          done
